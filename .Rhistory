for (par in vctnames12leadmeasurements ){
print(par[1])
}
vctnames12leadmeasurements<-names(xml_data$RestingECGMeasurements$MeasurementTable)
for (par in vctnames12leadmeasurements ){
print(par[1])
}
len(vctnames12leadmeasurements)
length(vctnames12leadmeasurements)
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)] ){
print(par[1])
}
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1] ){
print(par[1])
}
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1] ){
extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$QDuration)
}
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1] ){
extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par`)
}
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1] ){
print(par)
extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par`)
}
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1] ){
print(par)
extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par`)
}
xml_data$RestingECGMeasurements$MeasurementTablepar
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1] ){
print(par)
print(extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par`))
}
extractECGMeasurementsMultilead <- function(parameter) {
if (length(parameter)==1){
return(NA)
} else {
vctleads=strsplit(parameter$LeadOrder,",")[[1]]
vctleads=trimws(vctleads)
vctmeasurements=strsplit(parameter$text,",")[[1]]
vctmeasurements=unlist(lapply(vctmeasurements,as.numeric))
names(vctmeasurements)<-vctleads
return(vctmeasurements)
}
}
for (par in vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1] ){
print(par)
print( extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par` ))
}
par
print( extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par` ))
xml_data$RestingECGMeasurements$MeasurementTable$`par`
xml_data$RestingECGMeasurements$MeasurementTable
par
ctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1]
vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1]
vctnames12leadmeasurements<-names(xml_data$RestingECGMeasurements$MeasurementTable)
vctnames12leadmeasurements
vctnames12leadmeasurements
length(vctnames12leadmeasurements)
vctnames12leadmeasurements[2:length(vctnames12leadmeasurements)-1]
vctnames12leadmeasurements
vctnames12leadmeasurements[1:(length(vctnames12leadmeasurements)-1) ]
vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ]
for (par in vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ] ){
print(par)
print( extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par` ))
}
strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder)[[1]]
strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder)[[1]]
xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder
strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder)
strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder,",")[[1]]
vctleadorder<-trimws(strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder,",")[[1]])
vctleadorder
extractECGMeasurementsMultilead <- function(parameter,vctleadorder) {
if (length(parameter)==1){
return(NA)
} else {
vctmeasurements=strsplit(parameter$text,",")[[1]]
vctmeasurements=unlist(lapply(vctmeasurements,as.numeric))
names(vctmeasurements)<-vctleadorder
return(vctmeasurements)
}
}
vctnames12leadmeasurements<-names(xml_data$RestingECGMeasurements$MeasurementTable)
vctleadorder<-trimws(strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder,",")[[1]])
for (par in vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ] ){
print(par)
print( extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par` ,vctleadorder) )
}
extractECGMeasurementsMultilead(xml_data$RestingECGMeasurements$MeasurementTable$`par`
)
xml_data$RestingECGMeasurements$MeasurementTable$`par`
xml_data$RestingECGMeasurements$MeasurementTable
xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder
xml_data$RestingECGMeasurements$MeasurementTable
str(xml_data$RestingECGMeasurements$MeasurementTable)
xml_data$RestingECGMeasurements$MeasurementTable
xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder
xml_data$RestingECGMeasurements$MeasurementTable
xml_data$RestingECGMeasurements$MeasurementTable$`par`
xml_data$RestingECGMeasurements$MeasurementTable
xml_data$RestingECGMeasurements$MeasurementTable$`par`
print(par)
xml_data$RestingECGMeasurements$MeasurementTable$QDuration
xml_data$RestingECGMeasurements$MeasurementTable$`par`
xml_data$RestingECGMeasurements$MeasurementTable$`par`
xml_data$RestingECGMeasurements$MeasurementTable[par]
xml_data$RestingECGMeasurements$MeasurementTable[par]
print( extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par] ,vctleadorder) )
extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par] ,vctleadorder)
xml_data$RestingECGMeasurements$MeasurementTable[par]
length(xml_data$RestingECGMeasurements$MeasurementTable[par])
xml_data$RestingECGMeasurements$MeasurementTable[par]
xml_data$RestingECGMeasurements$MeasurementTable[par][1]
xml_data$RestingECGMeasurements$MeasurementTable[par][[1]]
length(xml_data$RestingECGMeasurements$MeasurementTable[par][[1]])
print( extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]] ,vctleadorder) )
for (par in vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ] ){
print(par)
print( extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]] ,vctleadorder) )
}
extractECGMeasurementsMultilead <- function(parameter,vctleadorder) {
if (length(parameter)==1){
return(NA)
} else {
print(names(parameter))
vctmeasurements=strsplit(parameter$text,",")[[1]]
vctmeasurements=unlist(lapply(vctmeasurements,as.numeric))
names(vctmeasurements)<-vctleadorder
return(vctmeasurements)
}
}
print( extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]] ,vctleadorder) )
for (par in vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ] ){
print(par)
print( extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]] ,vctleadorder) )
}
vctMultileadM = extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]] ,vctleadorder)
vctMultileadM
extractECGMeasurementsMultilead <- function(parameter,vctleadorder) {
if (length(parameter)==1){
return(NA)
} else {
vctmeasurements=strsplit(parameter$text,",")[[1]]
vctmeasurements=unlist(lapply(vctmeasurements,as.numeric))
names(vctmeasurements)<-vctleadorder
return(vctmeasurements)
}
}
vctMultileadM = extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]] ,vctleadorder)
vctMultileadM
names(vctMultileadM)
paste(par,names(vctMultileadM))
paste(par,names(vctMultileadM),sep="_")
paste(par,names(vctMultileadM),sep="_")
names(vctMultileadM)<-paste(par,names(vctMultileadM),sep="_")
names(vctMultileadM)
vctMultileadM
VctResults=[]
VctResults=list()
VctResults=list()
VctResults
VctResults=list()
vctleadorder
dput(vctleadorder)
vctnames12leadmeasurements
values(vctleadorder
name)
names(vctleadorder)
names(vctleadorder)<-vctleadorder
vctleadorder
vctleadorder-1
vctleadorder<-1
vctleadorder
vctleadorder=c("I", "II", "III", "aVR", "aVL", "aVF", "V1", "V2", "V3", "V4", "V5", "V6") ## hardcoded.
NA*12
repeat(NA,12)
repeat(2,12)
rep(2,12)
rep(NA,12)
vctmeasurements=rep(NA,12)
names(vctmeasurements)<-vctleadorder
vctmeasurements
extractECGMeasurementsMultilead <- function(parameter) {
vctleadorder=c("I", "II", "III", "aVR", "aVL", "aVF", "V1", "V2", "V3", "V4", "V5", "V6") ## hardcoded.
if (length(parameter)==1){
vctmeasurements=rep(NA,12)
names(vctmeasurements)<-vctleadorder
return(vctmeasurements)
} else {
vctmeasurements=strsplit(parameter$text,",")[[1]]
vctmeasurements=unlist(lapply(vctmeasurements,as.numeric))
names(vctmeasurements)<-vctleadorder
return(vctmeasurements)
}
}
for (par in vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ] ){
print(par)
vctMultileadM = extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]])
names(vctMultileadM)<-paste(par,names(vctMultileadM),sep="_")
}
vctMultileadM
xml_data
list(PQInterval,PDuration)
VctResults=c(PQInterval=PQInterval,PDuration=PDuration)
VctResults
vctnames12leadmeasurements
VctResults=c(PQInterval=PQInterval,PDuration=PDuration ,QRSDuration=QRSDuration,QTInterval=QTInterval,QTcInterval=QTcInterval,RRInterval=RRInterval,PPInterval=PPInterval,
VctResults=c(PQInterval=PQInterval,PDuration=PDuration ,QRSDuration=QRSDuration,QTInterval=QTInterval,QTcInterval=QTcInterval,RRInterval=RRInterval,PPInterval=PPInterval,
SokolovLVHIndex=SokolovLVHIndex,PAaxis=PAaxis,RAaxis=RAaxis,TAaxis=TAaxis,
POnset=POnset,POffset=POffset,QOnset=QOnset,QOffset=QOffset,TOffset=TOffset,
QTDispersion=QTDispersion,QTDispersionBazett=QTDispersionBazett,QRSNum=QRSNum)
v
VctResults=c(PQInterval=PQInterval,PDuration=PDuration ,QRSDuration=QRSDuration,QTInterval=QTInterval,QTcInterval=QTcInterval,RRInterval=RRInterval,PPInterval=PPInterval,
SokolovLVHIndex=SokolovLVHIndex,PAaxis=PAaxis,RAaxis=RAaxis,TAaxis=TAaxis,
POnset=POnset,POffset=POffset,QOnset=QOnset,QOffset=QOffset,TOffset=TOffset,
QTDispersion=QTDispersion,QTDispersionBazett=QTDispersionBazett,QRSNum=QRSNum)
v
VctResults=c(PQInterval=PQInterval,PDuration=PDuration ,QRSDuration=QRSDuration,QTInterval=QTInterval,QTcInterval=QTcInterval,RRInterval=RRInterval,PPInterval=PPInterval,
SokolovLVHIndex=SokolovLVHIndex,PAaxis=PAaxis,RAaxis=RAaxis,TAaxis=TAaxis,
POnset=POnset,POffset=POffset,QOnset=QOnset,QOffset=QOffset,TOffset=TOffset,
QTDispersion=QTDispersion,QTDispersionBazett=QTDispersionBazett,QRSNum=QRSNum)
VctResults
VctResults=c(VentricularRate=VentricularRate,
PQInterval=PQInterval,PDuration=PDuration ,QRSDuration=QRSDuration,QTInterval=QTInterval,QTcInterval=QTcInterval,RRInterval=RRInterval,PPInterval=PPInterval,
SokolovLVHIndex=SokolovLVHIndex,PAaxis=PAaxis,RAaxis=RAaxis,TAaxis=TAaxis,
POnset=POnset,POffset=POffset,QOnset=QOnset,QOffset=QOffset,TOffset=TOffset,
QTDispersion=QTDispersion,QTDispersionBazett=QTDispersionBazett,QRSNum=QRSNum)
VctResults
VctResults=VctResults(VctResults,vctMultileadM)
VctResults
c(VctResults,vctMultileadM)
VctResults=c(VentricularRate=VentricularRate,
PQInterval=PQInterval,PDuration=PDuration ,QRSDuration=QRSDuration,QTInterval=QTInterval,QTcInterval=QTcInterval,RRInterval=RRInterval,PPInterval=PPInterval,
SokolovLVHIndex=SokolovLVHIndex,PAaxis=PAaxis,RAaxis=RAaxis,TAaxis=TAaxis,
POnset=POnset,POffset=POffset,QOnset=QOnset,QOffset=QOffset,TOffset=TOffset,
QTDispersion=QTDispersion,QTDispersionBazett=QTDispersionBazett,QRSNum=QRSNum)
vctnames12leadmeasurements<-names(xml_data$RestingECGMeasurements$MeasurementTable)
#vctleadorder<-trimws(strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder,",")[[1]])
for (par in vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ] ){
print(par)
vctMultileadM = extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]])
names(vctMultileadM)<-paste(par,names(vctMultileadM),sep="_")
VctResults=c(VctResults,vctMultileadM)
}
VctResults
ecg12lead
df=as.dataframe()
df=data.frame
df=data.frame()
rbind(df,VctResults)
df=rbind(df,VctResults)
df=rbind(df,VctResults)
df
df=rbind(df,VctResults)
df
names(df)=names(VctResults)
names(df)
df
vctnames12leadmeasurements
dir="/data_work/databases/ukbiobanks/ecgs/12lead/"
files <- list.files(path=dir, pattern="*.xml$", full.names=T, recursive=FALSE)
### load packages:
library(lattice)
library(XML)
library(ggplot2)
library(reshape2)
# install.packages("lattice")
df=data.frame()
for(ecg12lead in  files){
data <- xmlTreeParse(ecg12lead, useInternalNodes=TRUE, options = HUGE)
print("xmlTreeParse done")
xml_data <- xmlToList(data)
print("xmlToList done")
extractECGMeasurements <- function(parameter) {
if (length(parameter)==1){
return(NA)
} else {
return(as.numeric(parameter$text))
}
}
extractECGMeasurementsMultilead <- function(parameter) {
#vctleadorder<-trimws(strsplit(xml_data$RestingECGMeasurements$MeasurementTable$LeadOrder,",")[[1]])
vctleadorder=c("I", "II", "III", "aVR", "aVL", "aVF", "V1", "V2", "V3", "V4", "V5", "V6") ## hardcoded.
if (length(parameter)==1){
vctmeasurements=rep(NA,12)
names(vctmeasurements)<-vctleadorder
return(vctmeasurements)
} else {
vctmeasurements=strsplit(parameter$text,",")[[1]]
vctmeasurements=unlist(lapply(vctmeasurements,as.numeric))
names(vctmeasurements)<-vctleadorder
return(vctmeasurements)
}
}
## Intervals ##
#checknumber <-function(number) {
#  if (is.na(number)){
#    return(NA)
#  } else {
#      return (number)
#    }
#}
VentricularRate=extractECGMeasurements(xml_data$RestingECGMeasurements$VentricularRate)
PQInterval=extractECGMeasurements(xml_data$RestingECGMeasurements$PQInterval)
PDuration=extractECGMeasurements(xml_data$RestingECGMeasurements$PDuration)
QRSDuration=extractECGMeasurements(xml_data$RestingECGMeasurements$QRSDuration)
QTInterval=extractECGMeasurements(xml_data$RestingECGMeasurements$QTInterval)
QTcInterval=extractECGMeasurements(xml_data$RestingECGMeasurements$QTCInterval)
RRInterval=extractECGMeasurements(xml_data$RestingECGMeasurements$RRInterval)
PPInterval=extractECGMeasurements(xml_data$RestingECGMeasurements$PPInterval)
## sokolovLHVindex ##
SokolovLVHIndex=extractECGMeasurements(xml_data$RestingECGMeasurements$SokolovLVHIndex)
# axis
PAaxis=extractECGMeasurements(xml_data$RestingECGMeasurements$PAxis)
RAaxis=extractECGMeasurements(xml_data$RestingECGMeasurements$RAxis)
TAaxis=extractECGMeasurements(xml_data$RestingECGMeasurements$TAxis)
## onsets ##
POnset=extractECGMeasurements(xml_data$RestingECGMeasurements$POnset)
POffset=extractECGMeasurements(xml_data$RestingECGMeasurements$POffset)
QOnset=extractECGMeasurements(xml_data$RestingECGMeasurements$QOnset)
QOffset=extractECGMeasurements(xml_data$RestingECGMeasurements$QOffset)
TOffset=extractECGMeasurements(xml_data$RestingECGMeasurements$TOffset)
QTDispersion=extractECGMeasurements(xml_data$RestingECGMeasurements$QTDispersion)
QTDispersionBazett=extractECGMeasurements(xml_data$RestingECGMeasurements$QTDispersionBazett)
QRSNum=extractECGMeasurements(xml_data$RestingECGMeasurements$QRSNum)
# put together in vector:
VctResults=c(VentricularRate=VentricularRate,
PQInterval=PQInterval,PDuration=PDuration ,QRSDuration=QRSDuration,QTInterval=QTInterval,QTcInterval=QTcInterval,RRInterval=RRInterval,PPInterval=PPInterval,
SokolovLVHIndex=SokolovLVHIndex,PAaxis=PAaxis,RAaxis=RAaxis,TAaxis=TAaxis,
POnset=POnset,POffset=POffset,QOnset=QOnset,QOffset=QOffset,TOffset=TOffset,
QTDispersion=QTDispersion,QTDispersionBazett=QTDispersionBazett,QRSNum=QRSNum)
## extract multilead;
vctnames12leadmeasurements<-names(xml_data$RestingECGMeasurements$MeasurementTable)
for (par in vctnames12leadmeasurements[2:(length(vctnames12leadmeasurements)-1) ] ){
print(par)
vctMultileadM = extractECGMeasurementsMultilead( xml_data$RestingECGMeasurements$MeasurementTable[par][[1]])
names(vctMultileadM)<-paste(par,names(vctMultileadM),sep="_")
VctResults=c(VctResults,vctMultileadM)
}
## add to dataframe
df=rbind(df,VctResults)
names(df)=names(VctResults)
}
View(df)
dfsnp<-read.table("/data_work/temp/rs1229984.raw")
View(df)
View(dfsnp)
dfsnp<-read.table("/data_work/temp/rs1229984.raw",header=True)
dfsnp<-read.table("/data_work/temp/rs1229984.raw",header=T)
View(dfsnp)
dfIntensitites<-read.table("/data_work/temp/adh2b.clusterplot.unique")
View(dfIntensitites)
dfIntensitites<-read.table("/data_work/temp/adh2b.clusterplot.unique",header=T)
View(dfsnp)
View(dfIntensitites)
dfIntensitites
names(dfIntensitites)
names(dfsnp)
dfmerged<-merge(dfIntensitites,dfsnp,by.x = "Person",by.y="IID")
dfmerged
View(dfsnp)
Vct<-c(NA,NA,2,4,5,NA)
length(Vct)
length(is.na(Vct))
length(!is.na(Vct))
length(Vct[!is.na(Vct)])
asd<-data.frame()
asd$n_eid<-000000000
asd$n_eid<-"000000000"
asd<-data.frame("n_eid")
View(asd)
?data.frame
asd<-data.frame(n_eid=000000000)
View(asd)
?merge
df<-fread("/data_work/databases/ukbiobanks/ecgs/DATA/cat.txt")
library(data.table)
df<-fread("/data_work/databases/ukbiobanks/ecgs/DATA/cat.txt")
View(df)
df[df$n_eid==2062910]
dftest<-df[df$n_eid==2062910]
View(dftest)
View(dftest)
dftest
dftest[!c("n_eid")]
dftest
dftest[!c("n_eid")]
dftest[c("n_eid")]
df<-data.frame(fread("/data_work/databases/ukbiobanks/ecgs/DATA/cat.txt"))
dftest<-df[df$n_eid==2062910]
aggregate(x=dftest[c("n_eid")], by=list(name=DF$name), min, na.rm = TRUE)
ftest[c("n_eid")]
dftest[c("n_eid")]
dftest
dftest$n_eid
dftest
dftest$n_eid
dftest$RR_reL_mean3s10s_0
dftest<-df[df$n_eid==2062910,]
aggregate(x=dftest[c("n_eid")], by=list(name=DF$name), min, na.rm = TRUE)
dftest[c("n_eid")]
aggregate(x=dftest[c("n_eid")], by=list(name=dftest$n_eid), min, na.rm = TRUE)
aggregate(x=dftest[c("n_eid")], by=list(name=dftest$n_eid), min, na.rm = TRUE)
aggregate(x=dftest[!c("n_eid")], by=list(name=dftest$n_eid), min, na.rm = TRUE)
dftest[c("n_eid")]
dftest[!c("n_eid")]
dftest[!c("n_eid")]
dftest[!c("n_eid"),]
names(dftest)
dftest[!names(dftest) %in% c("n_eid")]
aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), min, na.rm = TRUE)
aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), max, na.rm = TRUE)
min
aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), min, na.rm = TRUE)
aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), mean, na.rm = TRUE)
dftestagg<-aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), mean, na.rm = TRUE)
View(dftestagg)
View(dftest)
dftest[!names(dftest) %in% c("n_eid")]
dftestagg
dftest$QT_reL_mean3s60s_wNA_1
QT_reL_mean3s60s_wNA_1
dftest$QT_reL_mean3s60s_wNA_1
dftest
dftest$QT_reL_mean3s60s_wNA_1
dftestagg<-aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), mean, na.rm = TRUE)
dftestagg
?aggregate
dftestagg<-aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), mean, na.rm = TRUE)
dftestagg
View(dftest)
View(dftestagg)
dftest<-aggregate(x=dftest[!names(dftest) %in% c("n_eid")], by=list(name=dftest$n_eid), mean, na.rm = TRUE)
df<-data.frame(fread("/data_work/databases/ukbiobanks/ecgs/DATA/cat.txt"))
df<-aggregate(x=df[!names(df) %in% c("n_eid")], by=list(name=df$n_eid), mean, na.rm = TRUE)
View(df)
View(df)
df<-data.frame(fread("/data_work/databases/ukbiobanks/ecgs/DATA/cat.txt"))
dfagg<-aggregate(x=df[!names(df) %in% c("n_eid")], by=list(name=df$n_eid), mean, na.rm = TRUE)
View(df)
View(dfagg)
dfagg<-aggregate(x=df[!names(df) %in% c("n_eid")], by=list(n_eid=df$n_eid), mean, na.rm = TRUE)
df<-data.frame(fread("/data_work/databases/ukbiobanks/ecgs/DATA/cat.txt"))
dfagg<-aggregate(x=df[!names(df) %in% c("n_eid")], by=list(n_eid=df$n_eid), mean, na.rm = TRUE)
dfagg
View(df)
View(dfagg)
dfagg<-aggregate(x=df[!names(df) %in% c("n_eid")], by=list(n_eid=df$n_eid),   if (any(is.finite(z<-na.omit(x)))) mean(z) else NA)
dfagg<-aggregate(x=df[!names(df) %in% c("n_eid")], by=list(n_eid=df$n_eid),   FUN=function(x)
if (any(is.finite(z<-na.omit(x)))) mean(z) else NA)
View(dfagg)
View(dfagg)
View(df)
dfuitkomsten<-read.table("/data_work/bitbucket/pythonscripts/MR/uitkomsten.tsv",header = T, na.strings =c("NA","."),stringsAsFactors=FALSE)
View(dfuitkomsten)
str(dfuitkomsten)
dfuitkomsten<-read.table("/data_work/bitbucket/pythonscripts/MR/uitkomsten.tsv",header = T, na.strings =c("NA","."),stringsAsFactors=FALSE)
str(dfuitkomsten)
dfsnpstats<-read.table("/data_work/bitbucket/pythonscripts/MR/chrALL.snpstats",header=T, na.strings ="NA",stringsAsFactors=FALSE)
str(dfsnpstats)
View(dfsnpstats)
dfmerge<-merge(dfuitkomsten, dfsnpstats,by.x="grs",by.y="RSID")
View(dfmerge)
dfmerge$eaf<-(dfmerge$AA*2 + dfmerge$AB)/(2*(dfmerge$AA+dfmerge$AB+dfmerge$BB))
names(dfmerge)
head(dfmerge)
str(dfmerge)
dfMRbaseExposure<-format_data(dfmerge,type="exposure",phenotype_col = "trait",snp_col = "grs",beta_col = "beta",se_col = "se",eaf_col = "eaf",effect_allele_col = "A_allele",other_allele_col = "B_allele",pval_col = "p")
dfMRbaseOutcome<-format_data(dfmerge,type="outcome",phenotype_col = "trait",snp_col = "grs",beta_col = "beta",se_col = "se",eaf_col = "eaf",effect_allele_col = "A_allele",other_allele_col = "B_allele",pval_col = "p")
dfMRbaseExposureSelection<-dfMRbaseExposure [dfMRbaseExposure$exposure=="logAlcUnits_Int3", ]
library(TwoSampleMR)
dfMRbaseExposure<-format_data(dfmerge,type="exposure",phenotype_col = "trait",snp_col = "grs",beta_col = "beta",se_col = "se",eaf_col = "eaf",effect_allele_col = "A_allele",other_allele_col = "B_allele",pval_col = "p")
dfMRbaseOutcome<-format_data(dfmerge,type="outcome",phenotype_col = "trait",snp_col = "grs",beta_col = "beta",se_col = "se",eaf_col = "eaf",effect_allele_col = "A_allele",other_allele_col = "B_allele",pval_col = "p")
dfMRbaseExposureSelection<-dfMRbaseExposure [dfMRbaseExposure$exposure=="logAlcUnits_Int3", ]
dfMRbaseOutcomeSelection<-dfMRbaseOutcome [dfMRbaseOutcome$outcome=="SmkA_ANY", ]
dat <- harmonise_data(dfMRbaseExposureSelection, dfMRbaseOutcomeSelection)
# Perform MR
res <- mr(dat)
res
dat
dfMRbaseOutcome
source('/Volumes/usb/LoopMRbase_mette.R', echo=TRUE)
View(dfMRbaseExposure)
library("XLConnect")
library("data.table")
library(readstata13)
#install.packages("/Users/niekverw/Dropbox/STATA_SCRIPTS/MASTER_SET/R-package/CreateUKBiobankPhentoypes_0.19.tar.gz",type="source",repos=NULL)
library(CreateUKBiobankPhentoypes)
library(data.table)
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
#setwd("/data_work/bitbucket/ukbio")
#create("CreateUKBiobankPhentoypes")
setwd("/data_work/bitbucket/ukbio/CreateUKBiobankPhentoypes")
document()
rm(dfDefinitions)
install("/data_work/bitbucket/ukbio/CreateUKBiobankPhentoypes")
library(CreateUKBiobankPhentoypes)
####
dfDefinitions_file_tsv="/data_work/bitbucket/ukbio/CreateUKBiobankPhentoypes/data/dfDefinitions.tsv"
dfDefinitions<-data.frame(fread(dfDefinitions_file_tsv))
dfDefinitions$Comment<-""
save(dfDefinitions, file="data/dfDefinitions.RData")
build()
library(CreateUKBiobankPhentoypes)
dfDefinitions
